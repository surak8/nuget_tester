//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Xml;
using NSCommon.Logging;

namespace NSRead_meta {
    public class read_metaDriver {
        #region constants
        const string LISTENER_NAME = "rmlistener";

        #endregion
        
        #region fields
        static XmlWriterSettings _settings;
        #endregion

        #region properties
        static XmlWriterSettings settings {
            get {
                if (_settings == null) {
                    _settings = new XmlWriterSettings();
                    _settings = new XmlWriterSettings();
                    _settings.Indent = true;
                    _settings.IndentChars = new string(' ', 4);
                    _settings.OmitXmlDeclaration = true;
                    _settings.WriteEndDocumentOnClose = true;
                    _settings.CloseOutput = true;
                }
                return _settings;
            }
        }
        #endregion

        #region main-line
        [STAThread()]
        public static void Main(string[] args) {
            int exitCode = 0;
            bool errorFound = false;
            //RMArgs xtargs = new RMArgs(args);
            RMArgs xtargs;
            XmlWriter xw = null;
            TextWriterTraceListener twtl = null;
            StringBuilder sb;
#if TRACE
            Trace.AutoFlush = true;
            twtl = new TextWriterTraceListener(Console.Out, LISTENER_NAME);
            Trace.Listeners.Add(twtl);
#endif
            xtargs = new RMArgs(args);
            if (args.Length < 1) {
                Console.Error.WriteLine("no args");
                showUsage(Console.Out);
                exitCode = 3;
            } else {
                if (xtargs.showHelp) {
                    Console.Error.WriteLine("help requested");
                    showUsage(Console.Out);

                } else {
                    if (string.IsNullOrEmpty(xtargs.inputFile)) {
                        errorFound |= true;
                        Console.Error.WriteLine("input-file not specified.");
                        exitCode = 3;
                    }
                    if (errorFound)
                        showUsage(Console.Error);
                    else {
                          sb = new  StringBuilder();
                        xw = XmlWriter.Create(sb, settings);
                        //xw=XmlWriter.Create()
                        if (string.IsNullOrEmpty(xtargs.outputFile)) {
                            settings.CloseOutput = false;
                            //xw = XmlWriter.Create(Console.Out, settings);
                        } 
                        //else {
                        //    ////settings.CloseOutput = true;
                        //    //xw = XmlWriter.Create(xtargs.outputFile, settings);
                        //}
                        try {
                            writePackage(xw, xtargs);
                            xw.Flush();
                            if (!string.IsNullOrEmpty(xtargs.outputFile))
                                File.WriteAllText(xtargs.outputFile, sb.ToString());
                            else
                                Console.Out.WriteLine(sb.ToString());
                            if (xtargs.verbose)
                               Trace.WriteLine("[VERBOSE] " + "wrote output to " + 
                                    (string.IsNullOrEmpty(xtargs.outputFile) ? 
                                    "<stdout>" : 
                                    xtargs.outputFile)); ;

                        } catch (Exception ex) {
                            MiniLogger.log(MethodBase.GetCurrentMethod(), ex);
                            exitCode = 1;
                        } finally {
                            if (xw != null) {
                                xw.Close();
                                xw.Dispose();
                                xw = null;
                            }
                        }
                    }
                }
                //KC      Trace.WriteLine("here");
            }
#if TRACE
            if (twtl != null) {
                Trace.Flush();
                Trace.Listeners.Remove(LISTENER_NAME);
            }
#endif
            Environment.Exit(exitCode);
        }
        #endregion

        #region methods

        static void writePackage(XmlWriter xw, RMArgs xtargs) {
            xw.WriteStartDocument();
            xw.WriteStartElement("package");

            xw.WriteStartElement("metadata");
            if (string.IsNullOrEmpty(xtargs.product))
                throw new ApplicationException("missing ID (AssemblyProduct)" );
            else {
                xw.WriteElementString("id", xtargs.product);
            }
            xw.WriteEndElement();

            xw.WriteEndElement();
            xw.WriteEndDocument();
        }

        static void showUsage(TextWriter tw) {
            string name = Path.GetFileNameWithoutExtension(
                Environment.GetCommandLineArgs()[0]);

            tw.WriteLine("usage: " + name + " [-vh?] [-o outfile] assembly_path");
        } 
        #endregion
    }
}