//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;
using NSCommon.Logging;

namespace NSTester {

    public class TesterClass {
        public NugetPackage readPackage(string filename) {
            XmlSerializer xs;
            XmlReaderSettings xrs;
            NugetPackage aPkg=null;
            XmlDeserializationEvents xde;
            //string err;

            //const string NS = "http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd";
            //xs = new XmlSerializer(typeof(NugetPackage), ns);
            xs = new XmlSerializer(typeof(NugetPackage));
        

            using (FileStream fs = new FileStream(filename, FileMode.Open)) {
                xrs = new XmlReaderSettings();

                xrs.ValidationFlags = XmlSchemaValidationFlags.AllowXmlAttributes | XmlSchemaValidationFlags.ProcessIdentityConstraints | XmlSchemaValidationFlags.ProcessInlineSchema | XmlSchemaValidationFlags.ProcessSchemaLocation | XmlSchemaValidationFlags.ReportValidationWarnings;
                //xrs.ValidationType = ValidationType.Auto;
                xrs.ValidationEventHandler += Xrs_ValidationEventHandler;
                using (XmlReader reader = XmlReader.Create(fs, xrs)) {
                    try {
                        xde = new XmlDeserializationEvents();
                        xde.OnUnknownAttribute = foundUnknownAttribute;
                        xde.OnUnknownElement = foundUnknownElement;
                        xde.OnUnknownNode = foundUnknownNode;
                        xde.OnUnreferencedObject = foundUnrefObject;
                        aPkg = xs.Deserialize(reader, xde) as NugetPackage;
                        //Trace.WriteLine(filename+":"+aPkg.ToString ());
                    } catch (Exception ex) {
                        //err = decompose(ex);
                        //Trace.WriteLine(err);
                        //Console.Error.WriteLine(err);
                        throw new ApplicationException("error reading " + filename, ex);
                    } finally {
                        xrs = null;
                    }
                }
            }
            xs = null;
            return aPkg;
        }

        public bool savePackage(string anArg, NugetPackage pkg) {
            XmlSerializer xs = new XmlSerializer(pkg.GetType());
            XmlWriterSettings xws;
            bool ret = false;
            XmlSerializerNamespaces ns = new XmlSerializerNamespaces();
            ns.Add("", "");
            try {
                using (FileStream fs=new FileStream(anArg , FileMode.Create)) {
                    xws = new XmlWriterSettings();
                    xws.Indent = true;
                    xws.IndentChars = new string(' ', 4);
                    xws.OmitXmlDeclaration = true;
                    using (XmlWriter xw = XmlWriter.Create(fs, xws)) {
                        xs.Serialize(xw, pkg,ns);
                        ret = true;
                    }

                }
            }catch(Exception ex) {
                throw new ApplicationException("serialization error occurred", ex);
            }finally {
                xs = null;
            }
            return ret;
        }

          


        void Xrs_ValidationEventHandler(Object sender, ValidationEventArgs e) {
            MiniLogger. log(MethodBase.GetCurrentMethod(), e.ToString());
        }

        void foundUnknownAttribute(Object sender, XmlAttributeEventArgs e) {
            MiniLogger.log(MethodBase.GetCurrentMethod(), e.ToString());
        }
   

        void foundUnknownElement(Object sender, XmlElementEventArgs e) {
            if (e.ObjectBeingDeserialized != null)
                MiniLogger.log(MethodBase.GetCurrentMethod(), e.ObjectBeingDeserialized.GetType().Name + " has child: " + e.Element.Name);
            else
                MiniLogger.log(MethodBase.GetCurrentMethod(), "node " + e.Element.Name + " expecting " + e.ExpectedElements);
        }

        void foundUnknownNode(Object sender, XmlNodeEventArgs e) {
            if (e.ObjectBeingDeserialized != null)
                MiniLogger.log(MethodBase.GetCurrentMethod(), "unhandled element: " + e.Name + " with parent " + e.ObjectBeingDeserialized.GetType().Name);
            else
                MiniLogger.log(MethodBase.GetCurrentMethod(), "unknown node: " + e.Name);
        }

        void foundUnrefObject(Object sender, UnreferencedObjectEventArgs e) {
            MiniLogger.log(MethodBase.GetCurrentMethod(), e.ToString());
        }
    }
}